{"version":3,"sources":["GridCell.js","actions.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["GridCell","this","props","sendCounterDrop","x","console","log","board","y","classes","undefined","className","onClick","handleClick","str","Component","connect","state","dispatch","col","type","payload","dropCounter","App","cells","row","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createStore","action","length","arr","counter","current","concat","slice","ReactDOM","render","store","document","getElementById"],"mappings":"+OAIMA,E,4KAEFC,KAAKC,MAAMC,gBAAgBF,KAAKC,MAAME,GACtCC,QAAQC,IAAIL,KAAKC,MAAMK,S,kCAIvBF,QAAQC,IAAIL,KAAKC,MAAMK,OACvBN,KAAKC,MAAMK,MAAQ,K,+BAMX,IAAD,OACDA,EAAQN,KAAKC,MAAMK,MACnBH,EAAIH,KAAKC,MAAME,EACfI,EAAIP,KAAKC,MAAMM,EACjBC,EAAU,OAYd,YAVoBC,IAAhBH,EAAMH,GAAGI,KACS,QAAhBD,EAAMH,GAAGI,GACXC,GAAW,MAGXA,GAAW,OAMb,sBAAKE,UAAWF,EAASG,QAAS,kBAAM,EAAKC,eAA7C,UACE,8BACGZ,KAAKC,MAAME,EADd,KACmBH,KAAKC,MAAMM,EAd9BM,aAiBA,qBAAKH,UAAU,wB,GApCAI,aA0DRC,eAZM,SAACC,GACpB,MAAO,CACLV,MAAOU,EAAMV,UAIO,SAACW,GACvB,MAAO,CACLf,gBAAiB,SAACgB,GAAD,OAASD,ECzDvB,SAAqBC,GAC1B,MAAO,CACLC,KAAM,eACNC,QAASF,GDsD0BG,CAAYH,QAIpCH,CAAuChB,GEzBvCuB,E,uKA7BX,IAFA,IAAMC,EAAQ,GAELhB,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAG3B,IAFA,IAAMiB,EAAM,GAEHrB,EAAI,EAAGA,EAAI,EAAGA,IACrBqB,EAAIC,KAAK,cAAC,EAAD,CAAkBtB,EAAGA,EAAGI,EAAGA,GAAZJ,IAG1BoB,EAAME,KACJ,qBAAaf,UAAU,MAAvB,SACGc,GADOjB,IASd,OACE,sBAAKG,UAAU,MAAf,UAIGa,EAJH,W,GAtBYT,aCQHY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OC2CCQ,mBAlCf,SAAiBnB,EAAOoB,GACtB,GACkB,iBAAhBA,EAAOjB,MACPH,EAAMV,MAAM8B,EAAOhB,SAASiB,QAAU,EACtC,CAEA,IAAIC,EAAMtB,EAAMV,MAAM8B,EAAOhB,SACvBmB,EAAUvB,EAAMwB,QAChBtB,EAAMF,EAAMV,MAAM8B,EAAOhB,SAASqB,OAAOF,GAG5B,IAAfD,EAAID,QACNjC,QAAQC,IAAI,WAWd,IAAMC,EAAQU,EAAMV,MAAMoC,QAG1B,OAFApC,EAAM8B,EAAOhB,SAAWF,EAEjB,CACLsB,QAA2B,QAAlBxB,EAAMwB,QAAoB,SAAW,MAC9ClC,MAAOA,GAGX,OAAOU,IA5CO,CACdwB,QAAS,MACTlC,MAAO,CACL,GACA,GACA,GACA,GACA,GACA,GACA,MCHJqC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.243b4618.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { dropCounter } from \"./actions\";\n\nclass GridCell extends Component {\n  handleClick() {\n    this.props.sendCounterDrop(this.props.x);\n    console.log(this.props.board);\n  }\n\n  resetGame() {\n    console.log(this.props.board);\n    this.props.board = [];\n    // this.props.board = \"\"; // reset board\n    // this.props.board.slice()\n    // [[], [], [], [], [], [], [],]\n  }\n\n  render() {\n    const board = this.props.board;\n    const x = this.props.x;\n    const y = this.props.y;\n    let classes = \"cell\";\n    let str;\n    if (board[x][y] !== undefined) {\n      if (board[x][y] === \"red\") {\n        classes += \" p2\";\n        // str = <h1>Red's turn</h1>;\n      } else {\n        classes += \" p1\";\n        // str = <h1>Yellow's turn</h1>;\n      }\n    }\n\n    return (\n      <div className={classes} onClick={() => this.handleClick()}>\n        <p>\n          {this.props.x}, {this.props.y}\n          {str}\n        </p>\n        <div className=\"Reset-button\">\n          {/* <button type=\"button\" className=\"reset\" onClick={() => this.resetGame}>\n            RESET\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst stateToProps = (state) => {\n  return {\n    board: state.board,\n  };\n};\n\nconst dispatchToProps = (dispatch) => {\n  return {\n    sendCounterDrop: (col) => dispatch(dropCounter(col)),\n  };\n};\n\nexport default connect(stateToProps, dispatchToProps)(GridCell);\n","// When someone clicks on a column\nexport function dropCounter(col) {\n  return {\n    type: \"DROP_COUNTER\",\n    payload: col,\n  };\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport GridCell from \"./GridCell.js\";\n\nclass App extends Component {\n  render() {\n    const cells = [];\n\n    for (let y = 5; y >= 0; y--) {\n      const row = [];\n\n      for (let x = 0; x < 7; x++) {\n        row.push(<GridCell key={x} x={x} y={y} />);\n      }\n\n      cells.push(\n        <div key={y} className=\"row\">\n          {row}\n        </div>\n      );\n    }\n\n    if (\"\") {\n    }\n\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome to Connect 4</h1>\n        </header> */}\n        {cells} {/* Contains Grid */}\n        {/* <h1>Red's go</h1> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from \"redux\";\n\n// Initial state for my store.\nconst initial = {\n  current: \"red\", // can also be 'yellow'\n  board: [\n    [], // column at index 0\n    [], // column at index 1\n    [], // column at index 2\n    [], // column at index 3\n    [], // column at index 4\n    [], // column at index 5\n    [], // column at index 6\n  ],\n};\n// action.payload can be used as an index.\nfunction reducer(state, action) {\n  if (\n    action.type === \"DROP_COUNTER\" &&\n    state.board[action.payload].length <= 5\n  ) {\n    // let len = state.board;\n    let arr = state.board[action.payload]; // iterate through this\n    const counter = state.current;\n    const col = state.board[action.payload].concat(counter); // Our new Col\n    // console.log(state.board[action.payload]);\n\n    if (arr.length === 3) {\n      console.log(\"you win\");\n    }\n\n    // if (len[0].length + len[1].length + len[2].length === 15) {\n    //   console.log(\"No one wins\");\n    // }\n\n    // if (state.board[action.payload].length === 3) {\n    //   console.log(\"you win\");\n    // }\n\n    const board = state.board.slice(); // Slice gives us a copy of the board so we don't change immutability.\n    board[action.payload] = col; // Need to update column with new counter\n\n    return {\n      current: state.current === \"red\" ? \"yellow\" : \"red\",\n      board: board,\n    };\n  }\n  return state;\n}\n\nexport default createStore(reducer, initial);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}